"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.dasmTypeScript = void 0;
const codemaker_1 = require("codemaker");
const fs = require("fs");
const os = require("os");
const path = require("path");
const util_1 = require("util");
const mkdtemp = util_1.promisify(fs.mkdtemp);
const readFile = util_1.promisify(fs.readFile);
async function dasmTypeScript(template, options = {}) {
    const definitions = new Array();
    for (const [id, resource] of Object.entries(template.Resources || {})) {
        const type = resource.Type;
        const props = resource.Properties || {};
        definitions.push({
            id,
            ...toCfnClassName(type),
            props: capitalizeKeys(props)
        });
    }
    const code = new codemaker_1.CodeMaker();
    const outFile = 'out.ts';
    code.openFile(outFile);
    const timestamp = options.timestamp !== undefined ? options.timestamp : true;
    const suffix = timestamp ? `at ${new Date().toISOString()}` : '';
    code.line(`// generated by cdk-dasm ${suffix}`);
    code.line();
    //
    // imports
    //
    code.line(`import { Stack, StackProps, Fn } from 'aws-cdk-lib';`);
    code.line(`import { Construct } from 'constructs';`);
    for (const ns of getUniqueNamespaces(definitions)) {
        const importName = `aws-cdk-lib/aws-${ns}`;
        code.line(`import * as ${ns} from '${importName}';`);
    }
    code.line();
    //
    // stack
    //
    code.openBlock(`export class MyStack extends Stack`);
    code.openBlock(`constructor(scope: Construct, id: string, props: StackProps = {})`);
    code.line(`super(scope, id, props);`);
    for (const def of definitions) {
        // no props
        if (Object.keys(def.props).length === 0) {
            code.line(`new ${def.className}(this, '${def.id}');`);
            continue;
        }
        code.indent(`new ${def.className}(this, '${def.id}', {`);
        for (const [key, value] of Object.entries(def.props)) {
            const json = JSON.stringify(value, undefined, 2);
            const [first, ...rest] = json.split('\n');
            if (rest.length === 0) {
                code.line(`${key}: ${first},`); // single line
            }
            else {
                code.line(`${key}: ${first}`);
                rest.forEach((r, i) => {
                    code.line(r + ((i === rest.length - 1) ? ',' : ''));
                });
            }
        }
        code.unindent('});');
    }
    code.closeBlock();
    code.closeBlock(' // MyStack');
    code.closeFile(outFile);
    const workdir = await mkdtemp(path.join(os.tmpdir(), 'cdk-dasm-typescript'));
    await code.save(workdir);
    return (await readFile(path.join(workdir, outFile))).toString();
}
exports.dasmTypeScript = dasmTypeScript;
function capitalizeKeys(x) {
    if (typeof (x) === 'function') {
        throw new Error(`function?`);
    }
    if (Array.isArray(x)) {
        return x.map(i => capitalizeKeys(i));
    }
    if (typeof (x) === 'object') {
        const ret = {};
        for (const [key, value] of Object.entries(x)) {
            let newKey;
            if (key === 'Ref' || key.startsWith('Fn::')) {
                newKey = key;
            }
            else {
                newKey = codemaker_1.toCamelCase(key);
            }
            ret[newKey] = capitalizeKeys(value);
        }
        return ret;
    }
    // primitive
    return x;
}
function toCfnClassName(resourceType) {
    const [, namespace, type] = resourceType.split('::');
    const className = `${(namespace === 'Serverless' ? 'Sam' : namespace).toLocaleLowerCase()}.Cfn${type}`;
    return { namespace: namespace.toLocaleLowerCase(), className };
}
function getUniqueNamespaces(definitions) {
    return [...new Set(definitions.map(definition => definition.namespace))].map((ns) => ns === 'serverless' ? 'sam' : ns);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGFzbS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRhc20udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEseUNBQW1EO0FBQ25ELHlCQUF5QjtBQUN6Qix5QkFBeUI7QUFDekIsNkJBQTZCO0FBQzdCLCtCQUFpQztBQUVqQyxNQUFNLE9BQU8sR0FBRyxnQkFBUyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUN0QyxNQUFNLFFBQVEsR0FBRyxnQkFBUyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQWtCakMsS0FBSyxVQUFVLGNBQWMsQ0FBQyxRQUFrQixFQUFFLFVBQStCLEVBQUU7SUFDeEYsTUFBTSxXQUFXLEdBQUcsSUFBSSxLQUFLLEVBQXVCLENBQUM7SUFFckQsS0FBSyxNQUFNLENBQUUsRUFBRSxFQUFFLFFBQVEsQ0FBRSxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFNBQVMsSUFBSSxFQUFFLENBQUMsRUFBRTtRQUN2RSxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBQzNCLE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDO1FBRXhDLFdBQVcsQ0FBQyxJQUFJLENBQUM7WUFDZixFQUFFO1lBQ0YsR0FBRyxjQUFjLENBQUMsSUFBSSxDQUFDO1lBQ3ZCLEtBQUssRUFBRSxjQUFjLENBQUMsS0FBSyxDQUFDO1NBQzdCLENBQUMsQ0FBQztLQUNKO0lBRUQsTUFBTSxJQUFJLEdBQUcsSUFBSSxxQkFBUyxFQUFFLENBQUM7SUFFN0IsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDO0lBRXpCLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFdkIsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLFNBQVMsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUM3RSxN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LENBQUM7S0FDWjtJQUVELFlBQVk7SUFDWixPQUFPLENBQUMsQ0FBQztBQUNYLENBQUM7QUFFRCxTQUFTLGNBQWMsQ0FBQyxZQUFvQjtJQUMxQyxNQUFNLENBQUUsQUFBRCxFQUFHLFNBQVMsRUFBRSxJQUFJLENBQUUsR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3ZELE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQyxTQUFTLEtBQUssWUFBWSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLGlCQUFpQixFQUFFLE9BQU8sSUFBSSxFQUFFLENBQUM7SUFDdkcsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxTQUFTLEVBQUUsQ0FBQztBQUNqRSxDQUFDO0FBRUQsU0FBUyxtQkFBbUIsQ0FBQyxXQUF1QztJQUNsRSxPQUFPLENBQUMsR0FBSSxJQUFJLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsS0FBSyxZQUFZLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDMUgsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvZGVNYWtlciwgdG9DYW1lbENhc2UgfSBmcm9tICdjb2RlbWFrZXInO1xuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuaW1wb3J0ICogYXMgb3MgZnJvbSAnb3MnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IHByb21pc2lmeSB9IGZyb20gJ3V0aWwnO1xuXG5jb25zdCBta2R0ZW1wID0gcHJvbWlzaWZ5KGZzLm1rZHRlbXApO1xuY29uc3QgcmVhZEZpbGUgPSBwcm9taXNpZnkoZnMucmVhZEZpbGUpO1xuXG5pbnRlcmZhY2UgQ29uc3RydWN0RGVmaW5pdGlvbiB7XG4gIG5hbWVzcGFjZTogc3RyaW5nO1xuICBjbGFzc05hbWU6IHN0cmluZztcbiAgaWQ6IHN0cmluZztcbiAgcHJvcHM6IHsgW2tleTogc3RyaW5nXTogYW55IH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGlzYXNzZW1ibGVyT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBJbmNsdWRlIGEgdGltZXN0YW1wIGluIHRoZSBnZW5lcmF0ZWQgb3V0cHV0LlxuICAgKlxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICByZWFkb25seSB0aW1lc3RhbXA/OiBib29sZWFuO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGFzbVR5cGVTY3JpcHQodGVtcGxhdGU6IFRlbXBsYXRlLCBvcHRpb25zOiBEaXNhc3NlbWJsZXJPcHRpb25zID0ge30pIHtcbiAgY29uc3QgZGVmaW5pdGlvbnMgPSBuZXcgQXJyYXk8Q29uc3RydWN0RGVmaW5pdGlvbj4oKTtcblxuICBmb3IgKGNvbnN0IFsgaWQsIHJlc291cmNlIF0gb2YgT2JqZWN0LmVudHJpZXModGVtcGxhdGUuUmVzb3VyY2VzIHx8IHt9KSkge1xuICAgIGNvbnN0IHR5cGUgPSByZXNvdXJjZS5UeXBlO1xuICAgIGNvbnN0IHByb3BzID0gcmVzb3VyY2UuUHJvcGVydGllcyB8fCB7fTtcblxuICAgIGRlZmluaXRpb25zLnB1c2goe1xuICAgICAgaWQsXG4gICAgICAuLi50b0NmbkNsYXNzTmFtZSh0eXBlKSxcbiAgICAgIHByb3BzOiBjYXBpdGFsaXplS2V5cyhwcm9wcylcbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0IGNvZGUgPSBuZXcgQ29kZU1ha2VyKCk7XG5cbiAgY29uc3Qgb3V0RmlsZSA9ICdvdXQudHMnO1xuXG4gIGNvZGUub3BlbkZpbGUob3V0RmlsZSk7XG5cbiAgY29uc3QgdGltZXN0YW1wID0gb3B0aW9ucy50aW1lc3RhbXAgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMudGltZXN0YW1wIDogdHJ1ZTtcbiAgY29uc3Qgc3VmZml4ID0gdGltZXN0YW1wID8gIGBhdCAke25ldyBEYXRlKCkudG9JU09TdHJpbmcoKX1gIDogJyc7XG5cbiAgY29kZS5saW5lKGAvLyBnZW5lcmF0ZWQgYnkgY2RrLWRhc20gJHtzdWZmaXh9YCk7XG4gIGNvZGUubGluZSgpO1xuXG4gIC8vXG4gIC8vIGltcG9ydHNcbiAgLy9cblxuICBjb2RlLmxpbmUoYGltcG9ydCB7IFN0YWNrLCBTdGFja1Byb3BzLCBGbiB9IGZyb20gJ2F3cy1jZGstbGliJztgKTtcbiAgY29kZS5saW5lKGBpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztgKTtcblxuICBmb3IgKGNvbnN0IG5zIG9mIGdldFVuaXF1ZU5hbWVzcGFjZXMoZGVmaW5pdGlvbnMpKSB7XG4gICAgY29uc3QgaW1wb3J0TmFtZSA9IGBhd3MtY2RrLWxpYi9hd3MtJHtuc31gO1xuICAgIGNvZGUubGluZShgaW1wb3J0ICogYXMgJHtuc30gZnJvbSAnJHtpbXBvcnROYW1lfSc7YCk7XG4gIH1cblxuICBjb2RlLmxpbmUoKTtcblxuICAvL1xuICAvLyBzdGFja1xuICAvL1xuXG4gIGNvZGUub3BlbkJsb2NrKGBleHBvcnQgY2xhc3MgTXlTdGFjayBleHRlbmRzIFN0YWNrYCk7XG4gIGNvZGUub3BlbkJsb2NrKGBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogU3RhY2tQcm9wcyA9IHt9KWApO1xuICBjb2RlLmxpbmUoYHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO2ApO1xuXG4gIGZvciAoY29uc3QgZGVmIG9mIGRlZmluaXRpb25zKSB7XG5cbiAgICAvLyBubyBwcm9wc1xuICAgIGlmIChPYmplY3Qua2V5cyhkZWYucHJvcHMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY29kZS5saW5lKGBuZXcgJHtkZWYuY2xhc3NOYW1lfSh0aGlzLCAnJHtkZWYuaWR9Jyk7YCk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBjb2RlLmluZGVudChgbmV3ICR7ZGVmLmNsYXNzTmFtZX0odGhpcywgJyR7ZGVmLmlkfScsIHtgKTtcblxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGRlZi5wcm9wcykpIHtcbiAgICAgIGNvbnN0IGpzb24gPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSwgdW5kZWZpbmVkLCAyKTtcbiAgICAgIGNvbnN0IFsgZmlyc3QsIC4uLnJlc3QgXSA9IGpzb24uc3BsaXQoJ1xcbicpO1xuXG4gICAgICBpZiAocmVzdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgY29kZS5saW5lKGAke2tleX06ICR7Zmlyc3R9LGApOyAvLyBzaW5nbGUgbGluZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29kZS5saW5lKGAke2tleX06ICR7Zmlyc3R9YCk7XG4gICAgICAgIHJlc3QuZm9yRWFjaCgociwgaSkgPT4ge1xuICAgICAgICAgIGNvZGUubGluZShyICsgKChpID09PSByZXN0Lmxlbmd0aCAtIDEpID8gJywnIDogJycpKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29kZS51bmluZGVudCgnfSk7Jyk7XG4gIH1cblxuICBjb2RlLmNsb3NlQmxvY2soKTtcblxuICBjb2RlLmNsb3NlQmxvY2soJyAvLyBNeVN0YWNrJyk7XG5cbiAgY29kZS5jbG9zZUZpbGUob3V0RmlsZSk7XG5cbiAgY29uc3Qgd29ya2RpciA9IGF3YWl0IG1rZHRlbXAocGF0aC5qb2luKG9zLnRtcGRpcigpLCAnY2RrLWRhc20tdHlwZXNjcmlwdCcpKTtcbiAgYXdhaXQgY29kZS5zYXZlKHdvcmtkaXIpO1xuXG4gIHJldHVybiAoYXdhaXQgcmVhZEZpbGUocGF0aC5qb2luKHdvcmtkaXIsIG91dEZpbGUpKSkudG9TdHJpbmcoKTtcbn1cblxuZnVuY3Rpb24gY2FwaXRhbGl6ZUtleXMoeDogYW55KTogYW55IHtcbiAgaWYgKHR5cGVvZih4KSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcihgZnVuY3Rpb24/YCk7XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheSh4KSkge1xuICAgIHJldHVybiB4Lm1hcChpID0+IGNhcGl0YWxpemVLZXlzKGkpKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YoeCkgPT09ICdvYmplY3QnKSB7XG4gICAgY29uc3QgcmV0OiB7IFtrZXk6IHN0cmluZ106IGFueSB9ID0ge307XG4gICAgZm9yIChjb25zdCBbIGtleSwgdmFsdWUgXSBvZiBPYmplY3QuZW50cmllcyh4KSkge1xuICAgICAgbGV0IG5ld0tleTtcbiAgICAgIGlmIChrZXkgPT09ICdSZWYnIHx8IGtleS5zdGFydHNXaXRoKCdGbjo6JykpIHtcbiAgICAgICAgbmV3S2V5ID0ga2V5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3S2V5ID0gdG9DYW1lbENhc2Uoa2V5KTtcbiAgICAgIH1cblxuICAgICAgcmV0W25ld0tleV0gPSBjYXBpdGFsaXplS2V5cyh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvLyBwcmltaXRpdmVcbiAgcmV0dXJuIHg7XG59XG5cbmZ1bmN0aW9uIHRvQ2ZuQ2xhc3NOYW1lKHJlc291cmNlVHlwZTogc3RyaW5nKSB7XG4gIGNvbnN0IFsgLCBuYW1lc3BhY2UsIHR5cGUgXSA9IHJlc291cmNlVHlwZS5zcGxpdCgnOjonKTtcbiAgY29uc3QgY2xhc3NOYW1lID0gYCR7KG5hbWVzcGFjZSA9PT0gJ1NlcnZlcmxlc3MnID8gJ1NhbScgOiBuYW1lc3BhY2UpLnRvTG9jYWxlTG93ZXJDYXNlKCl9LkNmbiR7dHlwZX1gO1xuICByZXR1cm4geyBuYW1lc3BhY2U6IG5hbWVzcGFjZS50b0xvY2FsZUxvd2VyQ2FzZSgpLCBjbGFzc05hbWUgfTtcbn1cblxuZnVuY3Rpb24gZ2V0VW5pcXVlTmFtZXNwYWNlcyhkZWZpbml0aW9uczogQXJyYXk8Q29uc3RydWN0RGVmaW5pdGlvbj4pOiBTdHJpbmdbXSB7XG4gIHJldHVybiBbLi4uIG5ldyBTZXQoZGVmaW5pdGlvbnMubWFwKGRlZmluaXRpb24gPT4gZGVmaW5pdGlvbi5uYW1lc3BhY2UpKV0ubWFwKChucykgPT4gbnMgPT09ICdzZXJ2ZXJsZXNzJyA/ICdzYW0nIDogbnMpO1xufVxuXG5pbnRlcmZhY2UgVGVtcGxhdGUge1xuICBSZXNvdXJjZXM6IHsgW2lkOiBzdHJpbmddOiBSZXNvdXJjZSB9O1xufVxuXG5pbnRlcmZhY2UgUmVzb3VyY2Uge1xuICBUeXBlOiBzdHJpbmc7XG4gIFByb3BlcnRpZXM/OiB7IFtwcm9wOiBzdHJpbmddOiBhbnkgfVxufVxuIl19